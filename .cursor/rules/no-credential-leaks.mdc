---
alwaysApply: true
---

# Credential and Environment Security Policy

## NEVER Hardcode Sensitive Information

**NEVER include these in code or configuration files that are committed to git:**
- API keys and secrets
- Authentication credentials (passwords, tokens, service account keys)
- GCP Project IDs
- Bucket names
- Database names and connection strings
- Datastore names
- Any environment-specific configuration values
- Personal or organization-specific identifiers

## Required Approach for Sensitive Data

### 1. Use Environment Variables with python-dotenv

Always load sensitive configuration from environment variables:

```python
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

# Access configuration from environment
project_id = os.getenv('GCP_PROJECT_ID')
bucket_name = os.getenv('GCS_BUCKET_NAME')
api_key = os.getenv('API_KEY')
```

### 2. Create or Update .env.example

When adding new environment variables, **always update .env.example** with:
- The parameter names (without values)
- Descriptive comments explaining what each parameter is for
- Example placeholder values that show the expected format

Example `.env.example`:
```bash
# Google Cloud Project ID
GCP_PROJECT_ID=your-project-id-here

# Google Cloud Storage bucket name for data storage
GCS_BUCKET_NAME=your-bucket-name

# API key for external service
API_KEY=your-api-key-here

# BigQuery dataset name
BQ_DATASET_NAME=your-dataset-name
```

### 3. Ensure .env is in .gitignore

The actual `.env` file with real values should **NEVER** be committed. Verify `.gitignore` includes:
```
.env
*.env
!.env.example
```

## Examples

❌ **DON'T DO THIS:**
```python
# Hardcoded credentials - BAD!
project_id = "my-company-prod-123"
api_key = "AIzaSyD1234567890abcdefg"
bucket = "my-secret-data-bucket"
```

✅ **DO THIS:**
```python
from dotenv import load_dotenv
import os

load_dotenv()

project_id = os.getenv('GCP_PROJECT_ID')
api_key = os.getenv('API_KEY')
bucket = os.getenv('GCS_BUCKET_NAME')

# Validate required environment variables
if not project_id:
    raise ValueError("GCP_PROJECT_ID environment variable is required")
```

And update `.env.example`:
```bash
# Google Cloud Project ID
GCP_PROJECT_ID=your-project-id

# API Key for authentication
API_KEY=your-api-key

# GCS Bucket name
GCS_BUCKET_NAME=your-bucket-name
```

## When Generating New Code

1. **Always use `os.getenv()` or `os.environ.get()`** for sensitive values
2. **Add `load_dotenv()` at the start** of scripts that need environment variables
3. **Update .env.example** with new environment variable names and descriptions
4. **Add validation** to ensure required environment variables are set
5. **Use descriptive variable names** that clearly indicate they come from environment

## Default Values and Fallbacks

Only use fallback values for non-sensitive configuration:

```python
# OK - non-sensitive default
log_level = os.getenv('LOG_LEVEL', 'INFO')

# NOT OK - sensitive value should never have a hardcoded fallback
api_key = os.getenv('API_KEY', 'default-key-123')  # ❌ BAD!

# Good - require sensitive values
api_key = os.getenv('API_KEY')
if not api_key:
    raise ValueError("API_KEY must be set")  # ✅ GOOD!
```
